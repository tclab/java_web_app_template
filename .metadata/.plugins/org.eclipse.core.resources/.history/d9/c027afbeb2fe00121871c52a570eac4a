package com.sophos.administrator.fc.props;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Properties;
import java.util.Set;


public class PropHandler {
	
	public PropHandler(){
		
	}
	
	/**
	 * Get a property.
	 * 
	 * @param key
	 * @return
	 */
	public static String getProp(String key) {
		String rutaArchivo = Constants.CONF_LOCATION + Constants.PROYECT_CONF;
		return getProperty(key, rutaArchivo);
	}
		
	/**
	 * Set the value of a property
	 * 
	 * @param key
	 * @return
	 */
	public static String setProp(String key, String value) {
		String rutaArchivo = Constants.CONF_LOCATION + Constants.PROYECT_CONF;
		return setProperty(key, value, rutaArchivo);
	}
	
	/**
	 * Set the value of a property
	 * 
	 * @param key
	 * @return
	 */
	public static Set<String> getKeys() {
		String rutaArchivo = Constants.CONF_LOCATION + Constants.PROYECT_CONF;
		return getPropertyKeys(rutaArchivo);
	}
	
	/**
	 * Set the value of a property
	 * 
	 * @param key
	 * @return
	 */
	public static void deleteProp(String key) {
		String rutaArchivo = Constants.CONF_LOCATION + Constants.PROYECT_CONF;
		deleteProperty(key, rutaArchivo);
	}
	
	/**
	 * Set a set of values.
	 * 
	 * @param key
	 * @return
	 */
	public static void setProps(Map<String, String> propSet) {
		String rutaArchivo = Constants.CONF_LOCATION + Constants.PROYECT_CONF;
		setProperties(propSet, rutaArchivo);
	} 

	
	/**
	 * Get values from properies files.
	 * 
	 * @param key
	 * @return
	 */
	private static String getProperty(String key, String propertyFile) {
		String property = null;
		File archivo = new File(propertyFile);
		Properties properties = new Properties();
		FileInputStream stream = null;
		try {
			if (!archivo.exists()) {
				archivo.createNewFile();
			}
			
			stream = new FileInputStream(archivo); 
			properties.load(stream);
			property = properties.getProperty(key);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (stream != null) {
					stream.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return property != null ? property : null;
	}
	
	/**
	 * Get the stored keys from properies files.
	 * 
	 * @param key
	 * @return
	 */
	private static Set<String> getPropertyKeys(String propertyFile) {
		Set<String> keys = null;
		File archivo = new File(propertyFile);
		Properties properties = new Properties();
		FileInputStream stream = null;
		try {
			if (!archivo.exists()) {
				archivo.createNewFile();
			}
			
			stream = new FileInputStream(archivo); 
			properties.load(stream);
			keys = properties.stringPropertyNames();
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (stream != null) {
					stream.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return keys;
	}
	
	/**
	 * Sets a value from a property file.
	 * @param key
	 * @param value
	 * @param propertyFile
	 */
	private static String setProperty(String key, String value, String propertyFile){
		
		File archivo = new File(propertyFile);
		String arc = "";
		Properties properties = new Properties();
		FileInputStream stream = null;
		
		try {
			if (!archivo.exists()) {
				archivo.createNewFile();
			}
			
			arc=archivo.getAbsolutePath();
			
			stream = new FileInputStream(archivo); 
			properties.load(stream);
			
			FileOutputStream fos = new FileOutputStream(archivo);
			properties.setProperty(key, value);
			properties.store(fos, null);
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (stream != null) {
					stream.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return arc;
	}
	
	/**
	 * Sets a value from a property file.
	 * @param key
	 * @param value
	 * @param propertyFile
	 */
	private static void deleteProperty(String key, String propertyFile){
		
		File archivo = new File(propertyFile);
		Properties properties = new Properties();
		FileInputStream stream = null;
		
		try {
			if (!archivo.exists()) {
				archivo.createNewFile();
			}
			
			stream = new FileInputStream(archivo); 
			properties.load(stream);
			
			FileOutputStream fos = new FileOutputStream(archivo);
			properties.remove(key);
			properties.store(fos, null);
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (stream != null) {
					stream.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * Sets different values from a property file.
	 * @param key
	 * @param value
	 * @param propertyFile
	 */
	private static void setProperties(Map<String, String> propSet, String propertyFile){
		File archivo = new File(propertyFile);
		System.out.println("File: "+ archivo.getAbsolutePath());
		Properties properties = new Properties();
		FileInputStream stream = null;
		try {
			if (!archivo.exists()) {
				archivo.createNewFile();
			}
			stream = new FileInputStream(archivo); 
			properties.load(stream);
			
			FileOutputStream fos = new FileOutputStream(archivo);
			Set<String> propKeys = propSet.keySet();
			for (String string : propKeys) {
				properties.setProperty(string, propSet.get(string));
			}
			properties.store(fos, null);
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (stream != null) {
					stream.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * Verifies the existence of a long object.
	 * 
	 * @param longValue
	 * @return
	 */
	private static boolean longExist(Long longValue) {
		return longValue != null ? true : false;
	}

	/**
	 * Verifies the existence of a String object.
	 * 
	 * @param string
	 * @return
	 */
	private static boolean stringExist(String string) {
		return string != null && string != "" ? true : false;
	}
	
	
	//TEST
	public static void main(String [] args){
		setProp("test.property.otra", "testValue");
//		System.out.println("Property: " + getProp("test.property"));
		
//		Set<String> keys = getKeys();
//		for (String string : keys) {
//			System.out.println("Key: " + string);
//		}
		
		deleteProp("test.property.nueva");
	}
}












