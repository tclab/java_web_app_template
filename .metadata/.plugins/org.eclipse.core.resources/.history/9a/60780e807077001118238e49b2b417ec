package com.artica.administrator.fc;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

import com.artica.administrator.bo.MenuItem;
import com.artica.administrator.utils.MenuHandler;
import com.artica.recommender.conf.PropHandler;

public class FCInit extends MultiActionController {
	public String logginView;
	public String logginSuccesView;
	public String externalView;
	public String adminView;
	public String loginView;
	public String newTabView;
	public String blankView;

	/**
	 * Init
	 * @param reques
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ModelAndView init(HttpServletRequest reques, HttpServletResponse response) throws Exception {
		return loginView(reques, response);
	}
	
	public ModelAndView sistPesaje(HttpServletRequest reques, HttpServletResponse response) throws Exception {
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("mainMenuItems", MenuHandler.getMainMenuItems());
		data.put("menuItems", MenuHandler.getPropMenuItems());
		data.put("section", "Sistema de pesajes v2.0");
		return new ModelAndView(blankView, data);
	}
	
	public ModelAndView diagnoDefecto(HttpServletRequest reques, HttpServletResponse response) throws Exception {
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("mainMenuItems", MenuHandler.getMainMenuItems());
		data.put("section", "Diagno-defecto y visi√≥n");
		return new ModelAndView(blankView, data);
	}
	
	public ModelAndView spd(HttpServletRequest reques, HttpServletResponse response) throws Exception {
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("mainMenuItems", MenuHandler.getMainMenuItems());
		data.put("section", "SPD");
		return new ModelAndView(blankView, data);
	}
	
	
	/**
	 * Loggin method.
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ModelAndView loginView(HttpServletRequest reques, HttpServletResponse response) throws Exception {
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("mainMenuItems", MenuHandler.getMainMenuItems());
		data.put("inicio", "true");
		return new ModelAndView(loginView, data);
	}
	
	/**
	 * Administration view.
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ModelAndView admin(HttpServletRequest reques, HttpServletResponse response) throws Exception {
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("mainMenuItems", MenuHandler.getMainMenuItems());
//		data.put("menuItems", MenuHandler.getPropMenuItems());
		return new ModelAndView(adminView, data);
	}
	
	/**
	 * Shows new tab view.
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ModelAndView newTabView(HttpServletRequest reques, HttpServletResponse response) throws Exception {
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("mainMenuItems", MenuHandler.getMainMenuItems());
		data.put("menuItems", MenuHandler.getPropMenuItems());
		return new ModelAndView(newTabView, data);
	}
	
	/**
	 * Save new tab.
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ModelAndView saveNewTab(HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> data = new HashMap<String, Object>();
		
		String menuId = removeBlankSpaces(request.getParameter("name"));
		String menuName = request.getParameter("name");
		String menuUrl = request.getParameter("url");
		
		//Name
		PropHandler.setProp("menuName."+menuId, menuName);
		
		//url
		PropHandler.setProp("url." + menuId, menuUrl);
		
		data.put("mainMenuItems", MenuHandler.getMainMenuItems());
		data.put("menuItems", MenuHandler.getPropMenuItems());
		return new ModelAndView(adminView, data);
	}
	
	/**
	 * Save url values.
	 * @param reques
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ModelAndView saveUrlValues(HttpServletRequest reques, HttpServletResponse response) throws Exception {
		Map<String, Object> data = new HashMap<String, Object>();
		
		HashMap<String, String> menu = new HashMap<String, String>();
		ArrayList<MenuItem> menuItems = MenuHandler.getMainMenuItems();
		for (MenuItem menuItem : menuItems) {
			PropHandler.setProp("url." + menuItem.getId(), reques.getParameter(menuItem.getId()));
		}
		
		data.put("mainMenuItems", MenuHandler.getMainMenuItems());
		data.put("menuItems", MenuHandler.getPropMenuItems());
		return new ModelAndView(adminView, data);
	}
	
	/**
	 * Delete a menu item.
	 * @param reques
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ModelAndView deleteMenuItem(HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> data = new HashMap<String, Object>();
		
		String menuItem = request.getParameter("menuItem");
		
		PropHandler.deleteProp("url." + menuItem);
		PropHandler.deleteProp("menuName." + menuItem);
		
		data.put("mainMenuItems", MenuHandler.getMainMenuItems());
		data.put("menuItems", MenuHandler.getPropMenuItems());
		return new ModelAndView(adminView, data);
	}
	
	/**
	 * Shows a external view.
	 * @param reques
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ModelAndView showView(HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("url", request.getParameter("url"));
		data.put("mainMenuItems", MenuHandler.getMainMenuItems());
		data.put("menuItems", MenuHandler.getPropMenuItems());
		return new ModelAndView(externalView, data);
	}
	
	
	
	/**
	 * Removes all blank spaces in a string.
	 * @param string
	 * @return
	 */
	public static String removeBlankSpaces(String string){
		return string.replaceAll("\\s", "");
	}
	

	//SETTINGS
	public void setLogginSuccesView(String logginSuccesView) {
		this.logginSuccesView = logginSuccesView;
	}

	public void setExternalView(String externalView) {
		this.externalView = externalView;
	}

	public void setAdminView(String adminView) {
		this.adminView = adminView;
	}

	public void setLoginView(String loginView) {
		this.loginView = loginView;
	}
	
	public void setNewTabView(String newTabView) {
		this.newTabView = newTabView;
	}
	
	public void setBlankView(String blankView) {
		this.blankView = blankView;
	}



	//TEST
	public static void main(String[] args) {
		System.out.println("Texto: juan diego toro, Reemplazo: " + removeBlankSpaces("juan diego toro"));
	}
	
	
}