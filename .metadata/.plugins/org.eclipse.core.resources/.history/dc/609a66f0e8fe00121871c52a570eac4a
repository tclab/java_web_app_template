package com.sophos.administrator.dao.menu;

import java.io.File;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.sophos.administrator.dao.exceptions.ConnectionException;
import com.sophos.administrator.dao.exceptions.DaoException;
import com.sophos.administrator.dao.utils.ConnectionHandler;
import com.sophos.administrator.props.PropHandler;
import com.sophos.reports.bo.menu.MenuItem;
import com.sophos.reports.utils.AdminPropHandler;


public class MenuDAO {

	/**
	 * Gets the list of sections.
	 */
	public ArrayList<MenuItem> getMenuItems(String section) {
		
		ArrayList<MenuItem> menuItems = new ArrayList<MenuItem>();
		
		Connection connection = null;
        PreparedStatement sections = null;
        ResultSet result = null;

        try {
        	connection = ConnectionHandler.getConeccion();
			if (connection == null) {
				throw new ConnectionException(AdminPropHandler.getConfProp("msg.exception.connectionExcep"));
			}
			
            String sql = "SELECT * FROM `tb_menu` WHERE PARENT IS NULL AND section = ?;";
//            String sql = "SELECT * FROM [tb_menu] WHERE PARENT IS NULL AND section = ?;";
            sections = connection.prepareStatement(sql);
            sections.setString(1, section);
            result = sections.executeQuery(); 
            
            while (result.next()) {
            	menuItems.add(new MenuItem(
            			result.getString("section"),
            			result.getString("name"),
            			result.getString("url"),
            			result.getString("parent"),
            			result.getString("order"),
            			result.getString("code")
            	));
            }
           
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
        	ConnectionHandler.closeConnection(connection);
        	try {
				if (sections != null && !sections.isClosed()) {
					sections.close();
				}
				if (result != null && !result.isClosed()) {
					result.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
        }

		return menuItems;
	}
	
	/**
	 * Get a single section.
	 * @param sectioName
	 * @return
	 */
	public MenuItem getSingleSection(String sectioName) {
		
		ArrayList<MenuItem> menuItems = new ArrayList<MenuItem>();
		
		Connection connection = null;
        PreparedStatement sections = null;
        ResultSet result = null;
        MenuItem menuItem = null;

        try {
        	connection = ConnectionHandler.getConeccion();
			if (connection == null) {
				throw new ConnectionException(AdminPropHandler.getConfProp("msg.exception.connectionExcep"));
			}
			
            String sql = "SELECT * FROM `tb_menu` WHERE PARENT IS NULL AND section = ?;";
//            String sql = "SELECT * FROM tb_menu WHERE PARENT IS NULL AND section = ?;";
            sections = connection.prepareStatement(sql);
            sections.setString(1, sectioName);
            result = sections.executeQuery();
            
            while (result.next()) {
            	menuItems.add(new MenuItem(
            			result.getString("section"),
            			result.getString("name"),
            			result.getString("url"),
            			result.getString("parent"),
            			result.getString("order"),
            			result.getString("code")
            	));
            }
            
            if (menuItems.size() > 0) {
				menuItem = menuItems.get(0);
			}
           
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
        	ConnectionHandler.closeConnection(connection);
        	try {
				if (sections != null && !sections.isClosed()) {
					sections.close();
				}
				if (result != null && !result.isClosed()) {
					result.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
        }

		return menuItem;
	}
	
	
	/**
	 * Get the childs of an item.
	 * @param parent
	 * @return
	 */
	public ArrayList<MenuItem> getChilds(String code) {

		ArrayList<MenuItem> menuItems = new ArrayList<MenuItem>();

		Connection connection = null;
		PreparedStatement sections = null;
		ResultSet result = null;

		try {
			connection = ConnectionHandler.getConeccion();
			if (connection == null) {
				throw new ConnectionException(AdminPropHandler.getConfProp("msg.exception.connectionExcep"));
			}

			String sql = "SELECT * FROM `tb_menu` WHERE parent = ?;";
//			String sql = "SELECT * FROM tb_menu WHERE parent = ?;";
			sections = connection.prepareStatement(sql);
			sections.setString(1, code);
			result = sections.executeQuery();

			while (result.next()) {
				menuItems.add(new MenuItem(result.getString("section"), result.getString("name"), result.getString("url"), result.getString("parent"), result.getString("order"), result.getString("code")));
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionHandler.closeConnection(connection);
			try {
				if (sections != null && !sections.isClosed()) {
					sections.close();
				}
				if (result != null && !result.isClosed()) {
					result.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return menuItems;
	}
	
	/**
	 * Load the menu xml file.
	 * @param menuXml
	 * @return
	 * @throws DaoException
	 */
	public boolean loadMenu (String menuXml) throws DaoException {
		
		boolean programsResult = false;
		Connection connection = null;
		PreparedStatement loadPrograms = null;

		try {
			connection = ConnectionHandler.getConeccion();
			if (connection == null) {
				throw new ConnectionException(AdminPropHandler.getConfProp("msg.exception.connectionExcep"));
			}

			//Load menu file.
			String sqlQueryProgram = "LOAD XML LOCAL INFILE ? " + 
				"INTO TABLE `tb_menu` " + 
				"ROWS IDENTIFIED BY '<" +PropHandler.getProp("admin.menu.rowIdentifier") + ">';";
			
//			String sqlQueryProgram = "LOAD XML LOCAL INFILE ? " + 
//					"INTO TABLE tb_menu " + 
//					"ROWS IDENTIFIED BY '<" + AdminPropHandler.getConfProp("admin.menu.rowIdentifier") + ">';";
			
			loadPrograms = connection.prepareStatement(sqlQueryProgram);
			loadPrograms.setString(1, menuXml);
			int programsR = loadPrograms.executeUpdate();

			
			if (programsR != 0) {
				programsResult = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionHandler.closeConnection(connection);
			try {
				if ((loadPrograms != null) && (!loadPrograms.isClosed())) {
					loadPrograms.close();
				}
			} catch (Exception exc) {
				throw new RuntimeException(exc);
			}
		}

		return programsResult;
	}
	
	/**
	 * Deletes the menu
	 * @return
	 */
	public boolean deleteMenu(){
		boolean programsResult = false;
		Connection connection = null;
		PreparedStatement del_menu = null;

		try {
			connection = ConnectionHandler.getConeccion();
			if (connection == null) {
				throw new ConnectionException(AdminPropHandler.getConfProp("msg.exception.connectionExcep"));
			}

			// Delete tb_menu content.
			String sqlQueryProgram = "DELETE FROM `tb_menu`;";
//			String sqlQueryProgram = "DELETE FROM tb_menu;";
			
			del_menu = connection.prepareStatement(sqlQueryProgram);
			int programsR = del_menu.executeUpdate();

			if (programsR != 0) {
			}
			
			programsResult = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionHandler.closeConnection(connection);
			try {
				if ((del_menu != null) && (!del_menu.isClosed())) {
					del_menu.close();
				}
			} catch (Exception exc) {
				throw new RuntimeException(exc);
			}
		}

		return programsResult;
	}
	
	/**
	 * Reaload the menu.
	 */
	public void resetMenu() {
		
		try {
			URL file = MenuDAO.class.getResource("/menu.xml");
			
			File menu = new File(file.getFile());
			if (!menu.isFile()) {
				throw new DaoException(AdminPropHandler.getConfProp("msg.exception.fileNotFound"));
			}
			
			
			if (deleteMenu()) {
				loadMenu(menu.getAbsolutePath());
			}
		} catch (DaoException e) {

		}
		
	}
	
	public static void main (String args []){
		new MenuDAO().resetMenu();
	}
}
